definitions:
  gingonic.JSONError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  models.Email:
    properties:
      body:
        type: string
      created:
        type: integer
      folder:
        type: string
      id:
        type: string
      title:
        type: string
      username:
        type: string
    required:
    - body
    - folder
    - username
    type: object
  models.Pingpong:
    properties:
      message:
        type: string
    type: object
  models.RegisterInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.User:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  parser.Action:
    properties:
      objectUrl:
        description: original source of the message (ipfs/s3,...)
        type: string
      topic:
        description: topic ()
        type: string
      type:
        description: type of action
        type: string
    type: object
  parser.Bounce:
    properties:
      bounceSubType:
        description: e.g. General
        type: string
      bounceType:
        description: e.g. Permament
        type: string
      bouncedRecipients:
        description: e.g. {"emailAddress":"jane@example.com","status":"5.1.1","action":"failed","diagnosticCode":"smtp;
          550 5.1.1 <jane@example.com>... User"}
        items:
          $ref: '#/definitions/parser.BouncedRecipient'
        type: array
      remoteMtaIp:
        description: e.g. 127.0.0.1" The IP address of the MTA to which Amazon SES
          attempted to deliver the email.
        type: string
      reportingMTA:
        description: e.g. "dns; email.example.com", The value of the Reporting-MTA
          field from the DSN. This is the value of the MTA that attempted to perform
          the delivery, relay, or gateway operation described in the DSN.
        type: string
    type: object
  parser.BouncedRecipient:
    properties:
      action:
        description: failed
        type: string
      diagnosticCode:
        type: string
      emailAddress:
        type: string
      status:
        type: string
    required:
    - action
    - emailAddress
    type: object
  parser.CommonHeader:
    properties:
      from:
        items:
          type: string
        type: array
      messageId:
        type: string
      subject:
        type: string
      timestamp:
        description: epoch time in miliseconds
        type: integer
      to:
        description: list of recipients (e.g. ["Jane Doe <jane@example.com>, Mary
          Doe <mary@example.com>, Richard Doe <richard@example.com>"])
        items:
          type: string
        type: array
    type: object
  parser.ComplainedRecipient:
    properties:
      emailAddress:
        type: string
    required:
    - emailAddress
    type: object
  parser.Complaint:
    properties:
      complainedRecipients:
        description: e.g. [{"emailAddress":"
        items:
          $ref: '#/definitions/parser.ComplainedRecipient'
        type: array
      complaintFeedbackType:
        description: e.g. abuse
        type: string
      userAgent:
        description: e.g. AnyCompany Feedback Loop (V0.01)
        type: string
    type: object
  parser.Delivery:
    properties:
      processingTimeMillis:
        description: miliseconds
        type: integer
      remoteMtaIp:
        description: e.g. 127.0.2.0
        type: string
      reportingMTA:
        description: e.g. a8-70.smtp-out.mail.io
        type: string
      smtpResponse:
        description: 'e.g. 250 ok:  Message 111 accepted'
        type: string
      timestamp:
        description: miliseconds since epoch
        type: integer
    type: object
  parser.HeaderAttribute:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  parser.Mail:
    properties:
      commonHeaders:
        $ref: '#/definitions/parser.CommonHeader'
      destination:
        items:
          type: string
        type: array
      headers:
        items:
          $ref: '#/definitions/parser.HeaderAttribute'
        type: array
      headersTruncated:
        type: boolean
      source:
        type: string
    type: object
  parser.MailReceived:
    properties:
      bounce:
        $ref: '#/definitions/parser.Bounce'
      complaint:
        $ref: '#/definitions/parser.Complaint'
      delivery:
        $ref: '#/definitions/parser.Delivery'
      mail:
        $ref: '#/definitions/parser.Mail'
      notificationType:
        description: 'possible values: Bounce, Complaint or Delivery'
        type: string
      receipt:
        $ref: '#/definitions/parser.Receipt'
      timestamp:
        description: since epoch in miliseconds
        type: integer
    required:
    - notificationType
    type: object
  parser.Receipt:
    properties:
      action:
        allOf:
        - $ref: '#/definitions/parser.Action'
        description: optional, action
      dkimVerdict:
        allOf:
        - $ref: '#/definitions/parser.VerdictStatus'
        description: optional, dkim verdict
      dmarcVerdict:
        allOf:
        - $ref: '#/definitions/parser.VerdictStatus'
        description: optional, dmarc verdict
      processingTimeMillis:
        description: optional field, only present if the message was processed
        type: integer
      recipients:
        description: list of recipients
        items:
          type: string
        type: array
      spamVerdict:
        allOf:
        - $ref: '#/definitions/parser.VerdictStatus'
        description: optional, spam verdict
      spfVerdict:
        allOf:
        - $ref: '#/definitions/parser.VerdictStatus'
        description: optinal, spf verdict
      virusVerdict:
        allOf:
        - $ref: '#/definitions/parser.VerdictStatus'
        description: optional, virus verdict
    required:
    - recipients
    type: object
  parser.VerdictStatus:
    properties:
      status:
        type: string
    type: object
  sns.Payload:
    properties:
      Message:
        type: string
      MessageId:
        type: string
      Signature:
        type: string
      SignatureVersion:
        type: string
      SigningCertURL:
        type: string
      Subject:
        type: string
      SubscribeURL:
        type: string
      Timestamp:
        type: string
      Token:
        type: string
      TopicArn:
        type: string
      Type:
        type: string
      UnsubscribeURL:
        type: string
    type: object
info:
  contact: {}
  description: This is a basic server example using go-web3-kit
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Web3 Go Kit basic server
  version: "1.0"
paths:
  /api/pong:
    get:
      consumes:
      - application/json
      description: Returns all available virtual machien types and their resource
        capacities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Pingpong'
      summary: Returns pong message
      tags:
      - PONG API
  /api/smtp:
    post:
      consumes:
      - application/json
      description: Receive webhook - entry point for all incoming emails
      parameters:
      - description: receiving email
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/sns.Payload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/parser.MailReceived'
        "400":
          description: can't login (no partner association)
          schema:
            $ref: '#/definitions/gingonic.JSONError'
        "401":
          description: login failed
          schema:
            $ref: '#/definitions/gingonic.JSONError'
      summary: Smtp Receive webhook
      tags:
      - Emails
  /api/v1/email:
    post:
      consumes:
      - application/json
      description: Nwe email received (eithe rSMTP or mailio)
      parameters:
      - description: receiving email
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Email'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Email'
        "400":
          description: can't login (no partner association)
          schema:
            $ref: '#/definitions/gingonic.JSONError'
        "401":
          description: login failed
          schema:
            $ref: '#/definitions/gingonic.JSONError'
      summary: New email received
      tags:
      - Emails
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Regiter user
      parameters:
      - description: Name and Password required
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: can't login (no partner association)
          schema:
            $ref: '#/definitions/gingonic.JSONError'
        "401":
          description: login failed
          schema:
            $ref: '#/definitions/gingonic.JSONError'
        "403":
          description: login forbidden
          schema:
            $ref: '#/definitions/gingonic.JSONError'
      summary: REgister user
      tags:
      - Login and Registration
swagger: "2.0"
